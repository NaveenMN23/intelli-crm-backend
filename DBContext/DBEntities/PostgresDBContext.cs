// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace IntelliCRMAPIService.DBContext
{
    public partial class PostgresDBContext : DbContext
    {
        public PostgresDBContext()
        {
        }

        public PostgresDBContext(DbContextOptions<PostgresDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Userdetails> Userdetails { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Customerproduct> Customerproduct { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("pg_catalog", "adminpack");

            modelBuilder.Entity<Customerproduct>(entity =>
            {
                entity.ToTable("customerproduct");

                entity.Property(e => e.Customerproductid)
                    .HasColumnName("customerproductid")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .HasColumnName("createdby");

                entity.Property(e => e.Createddate).HasColumnName("createddate");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .HasColumnName("modifiedby");

                entity.Property(e => e.Modifieddate).HasColumnName("modifieddate");

                entity.Property(e => e.Productid).HasColumnName("productid");

                entity.Property(e => e.Productname)
                    .HasMaxLength(50)
                    .HasColumnName("productname");

                entity.Property(e => e.Productprice)
                    .HasMaxLength(50)
                    .HasColumnName("productprice");

                entity.Property(e => e.Qtyassign)
                    .HasMaxLength(50)
                    .HasColumnName("qtyassign");

                entity.Property(e => e.Useridfk).HasColumnName("useridfk");

                entity.HasOne(d => d.UseridfkNavigation)
                    .WithMany(p => p.Customerproduct)
                    .HasForeignKey(d => d.Useridfk)
                    .HasConstraintName("customerproduct_useridfk_fkey");
            });

            modelBuilder.Entity<Userdetails>(entity =>
            {
                entity.ToTable("userdetails");

                entity.Property(e => e.Userdetailsid)
                    .HasColumnName("userdetailsid")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .HasColumnName("address");

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .HasColumnName("city");

                entity.Property(e => e.Coutry)
                    .HasMaxLength(100)
                    .HasColumnName("coutry");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .HasColumnName("createdby");

                entity.Property(e => e.Createddate).HasColumnName("createddate");

                entity.Property(e => e.Creditlimit).HasColumnName("creditlimit");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .HasColumnName("modifiedby");

                entity.Property(e => e.Modifieddate).HasColumnName("modifieddate");

                entity.Property(e => e.Soareceviedamount).HasColumnName("soareceviedamount");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .HasColumnName("state");

                entity.Property(e => e.UseridFk).HasColumnName("userid_fk");

                entity.HasOne(d => d.UseridFkNavigation)
                    .WithMany(p => p.Userdetails)
                    .HasForeignKey(d => d.UseridFk)
                    .HasConstraintName("userdetails_userid_fk_fkey");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.Userid)
                    .HasName("users_pkey");

                entity.ToTable("users");

                entity.Property(e => e.Userid)
                    .HasColumnName("userid")
                    .UseIdentityAlwaysColumn();

                entity.Property(e => e.Accountstatus).HasColumnName("accountstatus");

                entity.Property(e => e.Accounttype).HasColumnName("accounttype");

                entity.Property(e => e.Contactnumber)
                    .HasMaxLength(10)
                    .HasColumnName("contactnumber");

                entity.Property(e => e.Createdby)
                    .HasMaxLength(50)
                    .HasColumnName("createdby");

                entity.Property(e => e.Createddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("createddate");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Firstname)
                    .HasMaxLength(50)
                    .HasColumnName("firstname");

                entity.Property(e => e.Lastname)
                    .HasMaxLength(50)
                    .HasColumnName("lastname");

                entity.Property(e => e.Modifiedby)
                    .HasMaxLength(50)
                    .HasColumnName("modifiedby");

                entity.Property(e => e.Modifieddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("modifieddate");

                entity.Property(e => e.Password)
                    .HasMaxLength(500)
                    .HasColumnName("password");

                entity.Property(e => e.Rightsforcustomeraccount).HasColumnName("rightsforcustomeraccount");

                entity.Property(e => e.Rolename)
                    .HasMaxLength(100)
                    .HasColumnName("rolename");

                entity.Property(e => e.Salt)
                    .HasMaxLength(100)
                    .HasColumnName("salt");
            });

            foreach (var property in modelBuilder.Model.GetEntityTypes()
                 .SelectMany(t => t.GetProperties())
                 .Where
                 (p
                  => p.ClrType == typeof(DateTime)
                     || p.ClrType == typeof(DateTime?)
                 ))
            {
                property.SetColumnType("timestamp without time zone");
            }

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}